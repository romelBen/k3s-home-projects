---
# Source: coredns/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: coredns-coredns
  namespace: kube-system
  labels:
    app.kubernetes.io/instance: "coredns"
    k8s-app: "coredns"
    kubernetes.io/cluster-service: "true"
    kubernetes.io/name: "CoreDNS"
    app.kubernetes.io/name: coredns
data:
  Corefile: |-
    .:53 {
        errors
        log
        health {
            lameduck 5s
        }
        ready
        kubernetes cluster.local in-addr.arpa ip6.arpa {
            pods insecure
            fallthrough in-addr.arpa ip6.arpa
            ttl 30
        }
        prometheus 0.0.0.0:9153
        forward . /etc/resolv.conf
        cache 30
        loop
        reload
        loadbalance
    }
    local.technolab.cloud:53 {
        errors
        log
        forward . 192.168.10.5
        cache 30
        loop
    }
---
# Source: coredns/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: coredns-coredns
  labels:
    app.kubernetes.io/instance: "coredns"
    k8s-app: "coredns"
    kubernetes.io/cluster-service: "true"
    kubernetes.io/name: "CoreDNS"
    app.kubernetes.io/name: coredns
rules:
- apiGroups:
  - ""
  resources:
  - endpoints
  - services
  - pods
  - namespaces
  verbs:
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - list
  - watch
---
# Source: coredns/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: coredns-coredns
  labels:
    app.kubernetes.io/instance: "coredns"
    k8s-app: "coredns"
    kubernetes.io/cluster-service: "true"
    kubernetes.io/name: "CoreDNS"
    app.kubernetes.io/name: coredns
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: coredns-coredns
subjects:
- kind: ServiceAccount
  name: default
  namespace: kube-system
---
# Source: coredns/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: coredns-coredns
  namespace: kube-system
  labels:
    app.kubernetes.io/instance: "coredns"
    k8s-app: "coredns"
    kubernetes.io/cluster-service: "true"
    kubernetes.io/name: "CoreDNS"
    app.kubernetes.io/name: coredns
  annotations:
    {}
spec:
  selector:
    app.kubernetes.io/instance: "coredns"
    k8s-app: "coredns"
    app.kubernetes.io/name: coredns
  clusterIP: 10.96.0.10
  ports:
  - port: 53
    protocol: UDP
    name: udp-53
  - port: 53
    protocol: TCP
    name: tcp-53
  type: ClusterIP
---
# Source: coredns/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: coredns-coredns
  namespace: kube-system
  labels:
    app.kubernetes.io/instance: "coredns"
    k8s-app: "coredns"
    kubernetes.io/cluster-service: "true"
    kubernetes.io/name: "CoreDNS"
    app.kubernetes.io/name: coredns
  annotations:
    configmap.reloader.stakater.com/reload: "coredns-coredns"
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/instance: "coredns"
      k8s-app: "coredns"
      app.kubernetes.io/name: coredns
  template:
    metadata:
      labels:
        k8s-app: "coredns"
        app.kubernetes.io/name: coredns
        app.kubernetes.io/instance: "coredns"
      annotations:
        checksum/config: 243a3840b005ba4a211a26fa62d4f60bce2cf981898dbf832b7a46a2da569860
        scheduler.alpha.kubernetes.io/critical-pod: ''
        scheduler.alpha.kubernetes.io/tolerations: '[{"key":"CriticalAddonsOnly", "operator":"Exists"}]'
    spec:
      terminationGracePeriodSeconds: 30
      serviceAccountName: default
      dnsPolicy: Default
      containers:
      - name: "coredns"
        image: "coredns/coredns:1.9.1"
        imagePullPolicy: IfNotPresent
        args: ["-conf", "/etc/coredns/Corefile"]
        volumeMounts:
        - name: config-volume
          mountPath: /etc/coredns
        resources:
          limits:
            cpu: 100m
            memory: 128Mi
          requests:
            cpu: 100m
            memory: 128Mi
        ports:
        - containerPort: 53
          protocol: UDP
          name: udp-53
        - containerPort: 53
          protocol: TCP
          name: tcp-53
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 60
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: /ready
            port: 8181
            scheme: HTTP
          initialDelaySeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
      volumes:
      - name: config-volume
        configMap:
          name: coredns-coredns
          items:
          - key: Corefile
            path: Corefile
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                - coredns
            topologyKey: "kubernetes.io/hostname"
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
        operator: Exists
      nodeSelector:
        node-role.kubernetes.io/master: "true"
