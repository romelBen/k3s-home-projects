kured:
  image:
    repository: ebrianne/kured
    tag: v1.9.1
    pullPolicy: IfNotPresent
    pullSecrets: []

  updateStrategy: RollingUpdate
  #  requires RollingUpdate updateStrategy
  maxUnavailable: 1

  podAnnotations: {}

  extraArgs: {}

  extraEnvVars:
    - name: SLACK_HOOK_URL
      valueFrom:
        secretKeyRef:
          name: kured-secret
          key: slack-webhook

  configuration:
    lockTtl: 30m                              # force clean annotation after this ammount of time (default 0, disabled)
    alertFilterRegexp: ""                     # alert names to ignore when checking for active alerts
    alertFiringOnly: false     # only consider firing alerts when checking for active alerts
    blockingPodSelector: []                   # label selector identifying pods whose presence should prevent reboots
    endTime: "06:00"                          # only reboot before this time of day (default "23:59")
    lockAnnotation: weave.works/kured-node-lock         # annotation in which to record locking node (default "weave.works/kured-node-lock")
    period: 2h0m0s                            # reboot check period (default 1h0m0s)
    forceReboot: false         # force a reboot even if the drain fails or times out (default: false)
    drainGracePeriod: ""       # time in seconds given to each pod to terminate gracefully, if negative, the default value specified in the pod will be used (default: -1)
    drainTimeout: ""           # timeout after which the drain is aborted (default: 0, infinite time)
    skipWaitForDeleteTimeout: ""  # when time is greater than zero, skip waiting for the pods whose deletion timestamp is older than N seconds while draining a node (default: 0)
    prometheusUrl: ""                         # Prometheus instance to probe for active alerts
    rebootDays: []                            # only reboot on these days (default [su,mo,tu,we,th,fr,sa])
    rebootSentinel: ""                        # path to file whose existence signals need to reboot (default "/var/run/reboot-required")
    rebootSentinelCommand: ""  # command for which a successful run signals need to reboot (default ""). If non-empty, sentinel file will be ignored.
    rebootCommand: "/bin/systemctl reboot"  # command to run when a reboot is required by the sentinel
    rebootDelay: ""            # add a delay after drain finishes but before the reboot command is issued
    slackChannel: ""                          # slack channel for reboot notfications
    slackHookUrl: ""          # slack hook URL for reboot notfications
    slackUsername: kured                      # slack username for reboot notfications (default "kured")
    notifyUrl: ${SLACK_HOOK_URL}                             # notification URL with the syntax as follows: https://containrrr.dev/shoutrrr/services/overview/
    messageTemplateDrain: Draining node %s.   # slack message template when notifying about a node being drained (default "Draining node %s")
    messageTemplateReboot: Rebooting node %s  # slack message template when notifying about a node being rebooted (default "Rebooted node %s")
    startTime: "22:00"                        # only reboot after this time of day (default "0:00")
    timeZone: Europe/Berlin                   # time-zone to use (valid zones from "time" golang package)
    annotateNodes: true       # enable 'weave.works/kured-reboot-in-progress' and 'weave.works/kured-most-recent-reboot-needed' node annotations to signify kured reboot operations
    lockReleaseDelay: 30m        # hold lock after reboot by this amount of time (default 0, disabled)
    preferNoScheduleTaint: ""  # Taint name applied during pending node reboot (to prevent receiving additional pods from other rebooting nodes). Disabled by default. Set e.g. to "weave.works/kured-node-reboot" to enable tainting.
    logFormat: "text"          # log format specified as text or json, defaults to text

  rbac:
    create: true

  serviceAccount:
    create: true
    name:

  podSecurityPolicy:
    create: false

  resources: {}

  metrics:
    create: false
    namespace: ""
    labels: {}
    interval: 60s
    scrapeTimeout: ""

  service:
    create: false
    port: 8080
    annotations: {}
    name: ""
    type: ClusterIP

  podLabels: {}

  priorityClassName: ""

  tolerations:
    - key: node-role.kubernetes.io/master
      operator: Exists
      effect: NoSchedule
    - key: "arch"
      operator: "Equal"
      value: "arm64"
      effect: "NoSchedule"

  affinity: {}

  nodeSelector:
    kubernetes.io/os: linux

  volumeMounts: []

  volumes: []
